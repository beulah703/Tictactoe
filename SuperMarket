

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class TrainClassServlet
 */
@WebServlet("/TrainClassServlet")
public class TrainClassServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
   
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		try {
			Connection c=null;
			Class.forName("org.postgresql.Driver");
			
			
			String s="";
			s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
			c=DriverManager.getConnection(s);
			int TrainNo = Integer.parseInt(request.getParameter("TrainNo"));
			
			Statement st= c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			ResultSet stt=st.executeQuery("select tr_tvl_class from beu_tvl_classes where tr_no ="+TrainNo+" ");
			stt.absolute(0);
			while(stt.next()) {
				response.getWriter().print("<option>"+stt.getString(1)+"</option>"+"<br>");
			}
		}catch(Exception e) {
			System.out.println(e);
		}
	}

	
	

}




import java.io.IOException;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class FromToTrainServlet
 */
@WebServlet("/FromToTrainServlet")
public class FromToTrainServlet extends HttpServlet {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		try {
			Connection c=null;
			Class.forName("org.postgresql.Driver");
			
			
			String s="";
			s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
			c=DriverManager.getConnection(s);
			Statement st= c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			ResultSet stt=st.executeQuery("select * from beu_stn");
			stt.absolute(0);
			while(stt.next()) {
				response.getWriter().print("<option>"+stt.getString(1)+"</option>"+"<br>");
			}
		}catch(Exception e) {
			System.out.println(e);
		}
	}
}

import java.io.IOException;
import java.io.PrintWriter;
import java.util.random.*;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class PassengerServlet
 */
@WebServlet("/PassengerServlet")
public class PassengerServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		//System.out.println(request.getParameter("TrainNo"));
		String Trno = request.getParameter("TrainNo");
		String Trname = request.getParameter("TrainName");
		String from = request.getParameter("From");
		String to = request.getParameter("To");
		String Class = request.getParameter("TrainClass");
		String Fare = request.getParameter("fare");
		
		String p1n = request.getParameter("passenger1_name");
		String p2n = request.getParameter("passenger2_name");
		String p3n = request.getParameter("passenger3_name");
		String p4n = request.getParameter("passenger4_name");
		String p5n = request.getParameter("passenger5_name");
		String p1a = request.getParameter("passenger1_age");
		String p2a = request.getParameter("passenger2_age");
		String p3a = request.getParameter("passenger3_age");
		String p4a = request.getParameter("passenger4_age");
		String p5a = request.getParameter("passenger5_age");
		
//		int Trno = 1234;
//		String Trname = null;
//		String from = "ND";
//		String to = "BBR";
//		String Class = "1AC";
//		int Fare =2;
//		System.out.println(Trno);
//		System.out.println(Trname);
//		System.out.println(from);
//		System.out.println(to);
//		System.out.println(Class);
//		System.out.println(Fare);
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		out.println("<html>");
		out.println("<head>");
		out.println("<title> TICKET DETAILS</title>");
		out.println("</head>");
		out.println("<body>");
		out.println("<center>");
		out.println("<h1>Ticket Details</h1>");
		out.println("<table>");
		out.println("<tr><th>Train number</th><th>Train Name   </th><th>From   </th><th>To</th><th>Class  </th><th>Passenger Name  </th><th>Passenger Age  </th>");
		out.println("<tr><td>" + Trno + "</td><td>" + Trname + "</td><td>" + from + "</td><td>" + to + "</td><td>"
				+ Class + "</td><td>"+p1n + "</td><td>"+p1a + "</td><td>" );
		out.println("<tr><td>" + Trno + "</td><td>" + Trname + "</td><td>" + from + "</td><td>" + to + "</td><td>"
				+ Class + "</td><td>"+p2n + "</td><td>"+p2a + "</td><td>" );
		out.println("<tr><td>" + Trno + "</td><td>" + Trname + "</td><td>" + from + "</td><td>" + to + "</td><td>"
				+ Class + "</td><td>"+p3n + "</td><td>"+p3a + "</td><td>" );
		out.println("<tr><td>" + Trno + "</td><td>" + Trname + "</td><td>" + from + "</td><td>" + to + "</td><td>"
				+ Class + "</td><td>"+p4n + "</td><td>"+p4a + "</td><td>" );
		out.println("<tr><td>" + Trno + "</td><td>" + Trname + "</td><td>" + from + "</td><td>" + to + "</td><td>"
				+ Class + "</td><td>"+p5n + "</td><td>"+p5a + "</td><td>" );

		out.println("</table>");
		out.println("</center>");
		out.println("<center>");
		out.println("<p>Total Fare:"+Fare+"</p>");
		out.println("</center>");
		out.println("</body>");
		out.println("<html><body>");
		out.println("<center>");
        out.println("<button onclick=\"goBack()\">Edit</button>");
        out.println("<script>");
        out.println("function goBack() {");
        out.println("    window.history.back();");
        out.println("}");
        out.println("</script>");
        out.println("</center>");
        out.println("<center>");
        out.println("<h1>Data saved successfully!</h1>");
       
        out.println("<button onclick=\"location.href='/SaveTicketservlet'\">Save</button>");
        
        out.println("</center>");
        out.println("</body></html>");

		out.println("</html>");
		
		
//		request.setAttribute("TrainNo", Trno);
//        request.setAttribute("TrainName", Trname);
//        request.setAttribute("From", from);
//        request.setAttribute("To", to);
//        request.setAttribute("TrainClass", Class);
//        request.setAttribute("fare", Fare);
//        request.setAttribute("passenger1_name", p1n);
//        request.setAttribute("passenger2_name", p2n);
//        request.setAttribute("passenger3_name", p3n);
//        request.setAttribute("passenger4_name", p4n);
//        request.setAttribute("passenger5_name", p5n);
//        request.setAttribute("passenger1_age", p1a);
//        request.setAttribute("passenger2_age", p2a);
//        request.setAttribute("passenger3_age", p3a);
//        request.setAttribute("passenger4_age", p4a);
//        request.setAttribute("passenger5_age", p5a);
//        RequestDispatcher dispatcher = request.getRequestDispatcher("/SaveTicketServlet");
//        dispatcher.forward(request, response);
		

	}

}

<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">

<title>Railway Reservation</title>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
</head>
<body>
<center>
<h1>Train Reservation</h1></center>


<script>
function fun1(){
	$.ajax({
		url:'FromToTrainServlet',
		method:'GET',
		success: function(resultText){
			$('#results').html(resultText);
			$('#resultss').html(resultText);
			
		},
		error:function(jqXHR,exception){
			console.log('Error Occured!');
		}
	})
}</script>
<center>
From : <Select id="results" ></Select>
To : <Select id="resultss" Onchange="fun()"></Select>
</center>
<center><br><br>
Date:<input type="text" id="date"/><br><br></center>
<center><button onclick="fun1()">submit</button></center>
<script>
function fun(){
	var from=$('#results').val();
	var to=$('#resultss').val();
	var dates=$('#date').val();
	$('#From').val(from);
	$('#To').val(to);
	$.ajax({
		url:'TrainFareServlet',
		method:'GET',
		data:{
			from:from,to:to
		},
		success: function (resultText) {
            $('#resultw').html(resultText);
         },
         error: function (jqXHR, exception) {
             console.log('Error occured!!');
          }
	})
	$.ajax({
		url:'TrainsServlet',
		
		method:'POST',
		data:{
			from:from,to:to,dates:dates
		},
        success: function (resultText) {
            $('#resultw').html(resultText);
         },
         error: function (jqXHR, exception) {
             console.log('Error occured!!');
          }
	})
	
}
</script><br><br>
<center><Select id="resultw" onChange="fun2()">
</Select></center>
<center>
Class: <Select id="resultClass" ></Select>

</center>
<form action="PassengerServlet" method="POST" >
<center><h1>Train Details</h1></center>
<center>

Train Number:<input type="text" name="TrainNo" id="TrainNo"/><br><br>
Train Name:<input type="text" name="TrainName" id="TrainName"/><br><br>
From:<input type="text" name="From" id="From"/><br><br>
To:<input type="text" name="To" id="To"/><br><br>
Train Class:<input type="text" name="TrainClass" id="TrainClass"/><br><br>
Fare:<input type="text" name="fare" id="fare" /><br><br>


  <h2>Passenger 1:</h2>
 
  Name:<input type="text" id="passenger1_name" name="passenger1_name" pattern="[A-Za-z]+" title="Please enter a valid name (text only)" required>
  <br>
  <label for="passenger1_age">Age:</label>
  <input  id="passenger1_age" name="passenger1_age" type="number" min="1" max="119" title="Please enter a valid age (0-119)" required>
  <br>
  <label><input type="radio" name="passenger1_gender" value="Male" onclick="updateGenderTextField(this.value)">Male</label>
  <label><input type="radio" name="passenger1_gender" value="Female" onclick="updateGenderTextField(this.value)">Female</label>
   <h2>Passenger 2:</h2>
  <label for="passenger2_name">Name:</label>
  <input type="text" id="passenger2_name" name="passenger2_name" pattern="[A-Za-z]+" title="Please enter a valid name (text only)" required>
  <br>
  <label for="passenger2_age">Age:</label>
  <input type="number" min="1" max="119" title="Please enter a valid age (0-119)" required id="passenger2_age" name="passenger2_age">
  <br>
  <label><input type="radio" name="passenger2_gender" value="Male" onclick="updateGenderTextField(this.value)">Male</label>
  <label><input type="radio" name="passenger2_gender" value="Female" onclick="updateGenderTextField(this.value)">Female</label>
  <br>

  <!-- Repeat the above fields for Passenger 2, Passenger 3, Passenger 4, and Passenger 5 -->

  <h2>Passenger 3:</h2>
  <label for="passenger3_name">Name:</label>
  <input type="text" id="passenger3_name" name="passenger3_name" pattern="[A-Za-z]+" title="Please enter a valid name (text only)" required>
  <br>
  <label for="passenger3_age">Age:</label>
  <input type="number" min="1" max="119" title="Please enter a valid age (0-119)" required id="passenger3_age" name="passenger3_age">
  <br>
  <label><input type="radio" name="passenger3_gender" value="Male" onclick="updateGenderTextField(this.value)">Male</label>
  <label><input type="radio" name="passenger3_gender" value="Female" onclick="updateGenderTextField(this.value)">Female</label>
  <br>

  <h2>Passenger 4:</h2>
  <label for="passenger4_name">Name:</label>
  <input type="text" id="passenger4_name" name="passenger4_name" pattern="[A-Za-z]+" title="Please enter a valid name (text only)" required>
  <br>
  <label for="passenger4_age">Age:</label>
  <input type="number" min="1" max="119" title="Please enter a valid age (0-119)" required id="passenger4_age" name="passenger4_age">
  <br>
  <label><input type="radio" name="passenger4_gender" value="Male" onclick="updateGenderTextField(this.value)">Male</label>
  <label><input type="radio" name="passenger4_gender" value="Female" onclick="updateGenderTextField(this.value)">Female</label>
  <br>
<h2>Passenger 5:</h2>
  <label for="passenger5_name">Name:</label>
  <input type="text" id="passenger5_name" name="passenger5_name" pattern="[A-Za-z]+" title="Please enter a valid name (text only)" required>
  <br>
  <label for="passenger5_age">Age:</label>
  <input type="number" min="1" max="119" title="Please enter a valid age (0-119)" required id="passenger5_age" name="passenger5_age" onchange="fun4class()">
  <br>
  <label><input type="radio" name="passenger5_gender" value="Male" >Male</label>
  <label><input type="radio" name="passenger5_gender" value="Female" >Female</label>
  <br>




 <input type="submit" value="Submit">
 
</center>
</form>



<script>
function fun2(){
	var arr= $('#resultw').val().split(" ");
	$('#TrainNo').val(arr[0]);
	$('#TrainName').val(arr[1]);
	$('#TrainClass').val(" ");
	$.ajax({
		url:'TrainClassServlet',
		method:'POST',
		data:{
			TrainNo:arr[0]
		},
		 success: function(resultText) {
		      $('#resultClass').html(resultText);
		    },
		    error: function(jqXHR, exception) {
		      console.log('Error Occurred!');
		    }
		
       
	})
	
}
</script>



<script>
function fun4class(){
	var arr= $('#resultClass').val();
	var arr1= $('#resultw').val().split(" ");
	var from=$('#results').val();
	var to=$('#resultss').val();
	var dates=$('#date').val();
	var p1age=$('#passenger1_age').val();
	var p2age=$('#passenger2_age').val();
	var p3age=$('#passenger3_age').val();
	var p4age=$('#passenger4_age').val();
	var p5age=$('#passenger5_age').val();
	
	$('#TrainClass').val(arr);
	
	$.ajax({
		url:'TrainFareServlet',
		method:'POST',
		data:{
			from:from,to:to,TrainNo:arr1[0],Class:arr,p1age:p1age,p2age:p2age,p3age:p3age,p4age:p4age,p5age:p5age
		},
	
	 success: function(resultText) {
		      $('#passenger5_age').html(resultText);
		    },
		    error: function(jqXHR, exception) {
		      console.log('Error Occurred!');
		    }
	})
}
</script>


<script>
function fun5pass(){
	var arr= $('#TrainNo').val();
	var arr1= $('#TrainName').val();
	var from=$('#From').val();
	var to=$('#To').val();
	var dates=$('#TrainClass').val();
	var datess=$('#fare').val();
	
	
	
	
	$.ajax({
		url:'PassengerServlet',
		method:'POST',
		data:{
			TrainNo:arr,TrainName:arr1,From:from,To:to,TrainClass:dates,fare:datess
		}
		
	
	
	})
}
</script>
<script >
function fares() {
    $.ajax({
        url: "TrainFareServlet",
        type: "POST",
        success: function (response) {
        
        	if(response){
  			  var fare = response;     
            $('#fare').val(fare);
           
        	}
        	else{
        		alert("Error");
        	}
           
        },
        error: function (xhr, status, error) {
            alert("An error occurred while fetching the record: " + error);
        }
    });
}</script>


<script>
  function updateGenderTextField(value) {
    var genderTextField = document.getElementById("genderTextField");
    genderTextField.value = value;
  }

  </script>

   

</body>
</html>



import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class SaveTicketServlet
 */
@WebServlet("/SaveTicketServlet")
public class SaveTicketServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public SaveTicketServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	
	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		try {
			Connection c=null;
			Class.forName("org.postgresql.Driver");
			
			
			String s="";
			s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
			c=DriverManager.getConnection(s);
			 String from = request.getParameter("from");
			 String to = request.getParameter("to");
			 String Class = request.getParameter("Class");
			 PreparedStatement statement = null;
			int Trno = Integer.parseInt(request.getParameter("TrainNo"));
				String Trname = request.getParameter("TrainName");
				
				String Fare = request.getParameter("fare");
				
				String p1n = request.getParameter("passenger1_name");
				String p2n = request.getParameter("passenger2_name");
				String p3n = request.getParameter("passenger3_name");
				String p4n = request.getParameter("passenger4_name");
				String p5n = request.getParameter("passenger5_name");
//				String p1g = request.getParameter("passenger1_gender");
//				String p2g = request.getParameter("passenger2_gender");
//				String p3g = request.getParameter("passenger3_gender");
//				String p4g = request.getParameter("passenger4_gender");
//				String p5g = request.getParameter("passenger5_gender");
				int p1a = Integer.parseInt(request.getParameter("passenger1_age"));
				int p2a = Integer.parseInt(request.getParameter("passenger2_age"));
				int p3a = Integer.parseInt(request.getParameter("passenger3_age"));
				int p4a = Integer.parseInt(request.getParameter("passenger4_age"));
				int p5a = Integer.parseInt(request.getParameter("passenger5_age"));
			  String sql = "INSERT INTO tickets (name , age  ,fromst ,Tost,TrainNo ,TrainName ,classtr ) VALUES (?,?,?,?,?,?,?)";

		        // Create the prepared statement
		        statement  = c.prepareStatement(sql);

		        // Set the parameter values
		        statement.setString(1, p1n);
		        statement.setInt(2, p1a);
		       
		        statement.setString(3, from);
		        statement.setString(4, to);
		        statement.setInt(5, Trno);
		        statement.setString(6, Trname);
		        statement.setString(7, Class);
		        
		        String sql1 = "INSERT INTO tickets (name , age  ,fromst ,Tost,TrainNo ,TrainName ,classtr ) VALUES (?,?,?,?,?,?,?)";

		        // Create the prepared statement
		        statement  = c.prepareStatement(sql1);

		        // Set the parameter values
		        statement.setString(1, p2n);
		        statement.setInt(2, p2a);
		       
		        statement.setString(3, from);
		        statement.setString(4, to);
		        statement.setInt(5, Trno);
		        statement.setString(6, Trname);
		        statement.setString(7, Class);
		        
		        String sql2 = "INSERT INTO tickets (name , age  ,fromst ,Tost,TrainNo ,TrainName ,classtr ) VALUES (?,?,?,?,?,?,?,?)";

		        // Create the prepared statement
		        statement  = c.prepareStatement(sql2);

		        // Set the parameter values
		        statement.setString(1, p3n);
		        statement.setInt(2, p3a);
		     
		        statement.setString(3, from);
		        statement.setString(4, to);
		        statement.setInt(5, Trno);
		        statement.setString(6, Trname);
		        statement.setString(7, Class);
		        
		        
		        String sql3 = "INSERT INTO tickets (name , age  ,fromst ,Tost,TrainNo ,TrainName ,classtr ) VALUES (?,?,?,?,?,?,?)";

		        // Create the prepared statement
		        statement  = c.prepareStatement(sql3);

		        // Set the parameter values
		        statement.setString(1, p4n);
		        statement.setInt(2, p4a);
		       
		        statement.setString(3, from);
		        statement.setString(4, to);
		        statement.setInt(5, Trno);
		        statement.setString(6, Trname);
		        statement.setString(7, Class);
		        
		        
		        String sql4 = "INSERT INTO tickets (name , age  ,fromst ,Tost,TrainNo ,TrainName ,classtr ) VALUES (?,?,?,?,?,?,?)";

		        // Create the prepared statement
		        statement  = c.prepareStatement(sql4);

		        // Set the parameter values
		        statement.setString(1, p5n);
		        statement.setInt(2, p5a);
		       
		        statement.setString(3, from);
		        statement.setString(4, to);
		        statement.setInt(5, Trno);
		        statement.setString(6, Trname);
		        statement.setString(7, Class);

		        // Execute the query
		        statement.executeUpdate();
	}catch(Exception e) {
		
	}

}
}



import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class TrainFareServlet
 */
@WebServlet("/TrainFareServlet")
public class TrainFareServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public TrainFareServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		try {
			Connection c=null;
			Class.forName("org.postgresql.Driver");
			
			String s="";
			s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
			c=DriverManager.getConnection(s);
			
			 String from = request.getParameter("from");
			 String to = request.getParameter("to");
			 String Class = request.getParameter("Class");

			int TrainNo = Integer.parseInt(request.getParameter("TrainNo"));
			int p1age = Integer.parseInt(request.getParameter("p1age"));
			int p2age = Integer.parseInt(request.getParameter("p2age"));
			int p3age = Integer.parseInt(request.getParameter("p3age"));
			int p4age = Integer.parseInt(request.getParameter("p4age"));
			int p5age = Integer.parseInt(request.getParameter("p5age"));
//			String from="ND";
//			String to="BBR";
//			String Class="3AC";
//			 int TrainNo = 22824;
			// System.out.println(from);
			// System.out.println(to);
			// System.out.println(Class);
			// System.out.println(TrainNo);
			System.out.println(p1age);
			System.out.println(p2age);
			System.out.println(p3age);

			Statement st = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			Statement st1 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			Statement st2 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			Statement st3 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			// ResultSet stt=st.executeQuery("select * from beu_stn_dis where fst_code='"+from+"' and
			// tst_code='"+to+"'");
			// stt.absolute(1);
			// System.out.println(stt.getInt(3));
			// int dist=stt.getInt(3);
//			String from = request.getParameter("from");
//			String to = request.getParameter("to");
//			String Class = request.getParameter("Class");

			ResultSet stt = st.executeQuery("select * from beu_stn_dis");
			ResultSet stt3 = st1.executeQuery("select * from beu_stn_dis");
			stt.absolute(0);
			stt3.absolute(0);
			int dist = 0;
			while (stt.next()) {

				// int TrainNo = Integer.parseInt(request.getParameter("TrainNo"));
				System.out.println(stt.getString(1));

				if (stt.getString(1).equals(from)) {

					System.out.println("dist is" + dist);
					while (stt3.next()) {

						if ((stt3.getString(2).equals(to))) {
							System.out.println("each dist" + (stt3.getInt(3)));
							dist = dist + stt3.getInt(3);
							break;
						} else {
							System.out.println("each dist" + (stt3.getInt(3)));
							dist = dist + stt3.getInt(3);
						}

					}

				}
			}

			System.out.println("dist is" + dist);
			stt.close();
			ResultSet stt1 = st.executeQuery(
					"select * from beu_tr_fares where far_dist=(select min(far_dist) from beu_tr_fares where far_dist>="
							+ dist + ")");
			stt1.absolute(1);
			System.out.println("fare" + stt1.getInt(2));
			int faredist = stt1.getInt(2);
			ResultSet stt2 = st.executeQuery(
					"select * from beu_tvl_classes where tr_no=" + TrainNo + " and tr_tvl_class='" + Class + "'");
			stt2.absolute(1);
			Double farefactor = stt2.getDouble(3);
			System.out.println("fare factor" + stt2.getDouble(3));
			Double TotalFare = farefactor * faredist;
			System.out.println(TotalFare);
			response.setContentType("text/html");

	        // Get the PrintWriter object to write the response
	        PrintWriter out = response.getWriter();
	        double TotalFare1=0,TotalFare2=0,TotalFare3=0,TotalFare4=0,TotalFare5=0;
	        if(p1age>10 && p1age<80) {
	        	 TotalFare1=TotalFare;
	        }
	        else if(p1age>80 || p1age<10){
	        	 TotalFare1=TotalFare/2;
	        }
	        if(p2age>10 && p2age<80) {
	        	 TotalFare2=TotalFare;
	        }
	        else if(p2age>80 || p2age<10){
	        	 TotalFare2=TotalFare/2;
	        }
	        if(p3age>10 && p3age<80) {
	        	 TotalFare3=TotalFare;
	        }
	        else if(p3age>80 || p3age<10){
	        	 TotalFare3=TotalFare/2;
	        }
	        if(p4age>10 && p4age<80) {
	        	 TotalFare4=TotalFare;
	        }
	        else if(p4age>80 || p4age<10){
	        	 TotalFare4=TotalFare/2;
	        }
	        if(p5age>10 && p5age<80) {
	        	 TotalFare5=TotalFare;
	        }
	        else if(p5age>80 || p5age<10){
	        	 TotalFare5=TotalFare/2;
	        }
	      double total=TotalFare1+TotalFare2+TotalFare3+TotalFare4+TotalFare5;
	        // Write the HTML response with the TotalFare value
	       // out.println("<h4>TotalFare is: " +TotalFare + "</h4><br>");

	        // Set the value of an HTML field using JavaScript
	        out.println("<script>document.getElementById('fare').value = " + total + ";</script>");
	    
	        
			 // response.getWriter().print("<h4>"+"TotalFare is:  "+TotalFare+"</h4>"+"<br>");
			
			
		}catch(Exception e) {
			System.out.println(e);
		}
	}

	
}

import java.sql.Date;
import java.text.SimpleDateFormat;

public class StringToSqlDateExample {
    public static void main(String[] args) {
        String dateString = "2023-04-25";
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        try {
            java.util.Date utilDate = format.parse(dateString);
            java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
            System.out.println(sqlDate);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
In the example above, we first define a string `dateString










package com.java.Test;

import java.awt.Button;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Label;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.time.Instant;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;

class superMarketApplication {
	ResultSet rs;
	Connection con;
	PreparedStatement ps;
	String query = "";

	public superMarketApplication() {
		Frame f = new Frame();
		// TextArea For Purchase
		TextArea ta = new TextArea();
		ta.setBounds(340, 550, 700, 250);

		// Label Creation
		Label ll = new Label("      Super Market");
		ll.setBounds(570, 40, 300, 40);
		ll.setFont(new Font("Bold", 70, 30));
		// ll.setBackground(Color.lightGray);
		f.add(ll);

		JButton b6 = new JButton("Customer");
		b6.setBounds(670, 360, 100, 30);
		JButton b7 = new JButton("Owner");
		b7.setBounds(670, 270, 100, 30);
		f.setLayout(null);
		f.setSize(1920, 1080);
		f.setTitle("SuperMarket");
		f.setVisible(true);
		f.add(b6);
		f.add(b7);
		ImageIcon background_image = new ImageIcon("C:\\Users\\beula\\OneDrive\\Pictures\\Saved Pictures\\beuus.jpg ");
		JLabel background = new JLabel("", background_image, JLabel.CENTER);
		Image img = background_image.getImage();
		Image temp_img = img.getScaledInstance(1920, 1080, Image.SCALE_SMOOTH);
		background_image = new ImageIcon(temp_img);
		background.setBounds(0, 0, 1920, 1080);
		f.add(background);

		f.setBackground(Color.lightGray);
		f.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent we) {
				System.exit(0);
			}

		});

		b7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {

				// Result set of VEndors list
				query = "Select * from bVendors";
				String y = "";
				try {
					String s="";
					Class.forName("org.postgresql.Driver");
					s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
			        con=DriverManager.getConnection(s);

					
					//Statement cs = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

					System.out.println(y);

				} catch (Exception exe) {
					System.out.println(exe);
				}

				Frame f1 = new Frame();
				Label ll = new Label("          OWNER");
				ll.setBounds(570, 40, 300, 40);
				ll.setFont(new Font("Bold", 70, 30));
				JButton b1 = new JButton("Purchase");
				b1.setBounds(540, 360, 130, 30);
				JButton b2 = new JButton("Master_Entry");
				b2.setBounds(540, 270, 130, 30);
				JButton b3 = new JButton("Stocks");
				b3.setBounds(740, 360, 130, 30);
				JButton b4 = new JButton("Reports");
				b4.setBounds(740, 270, 130, 30);

				f1.setLayout(null);
				f1.setSize(1920, 1080);
				f1.setTitle("OWNER");
				f1.setVisible(true);
				f1.add(ll);
				f1.add(b1);
				f1.add(b2);
				f1.add(b3);
				f1.add(b4);
				ImageIcon background_image = new ImageIcon("C:\\Users\\beula\\OneDrive\\Pictures\\Saved Pictures\\beuus.jpg ");
				JLabel background = new JLabel("", background_image, JLabel.CENTER);
				Image img = background_image.getImage();
				Image temp_img = img.getScaledInstance(1920, 1080, Image.SCALE_SMOOTH);
				background_image = new ImageIcon(temp_img);
				background.setBounds(0, 0, 1920, 1080);
				f1.add(background);

				f1.setBackground(Color.lightGray);
				f1.addWindowListener(new WindowAdapter() {
					public void windowClosing(WindowEvent we) {
						System.exit(0);
					}

				});

				//
				b1.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent ae) {
						try {

							Frame f2 = new Frame();
							Label l1 = new Label("Enter Vendor_Id");
							l1.setBounds(450, 200, 120, 30);
							// l1.setBackground(Color.lightGray);
							TextField tf1 = new TextField("0");
							tf1.setBounds(600, 200, 100, 30);

							Label l2 = new Label("Enter Product_Id");
							l2.setBounds(450, 250, 120, 30);
							// l2.setBackground(Color.lightGray);
							TextField tf2 = new TextField("0");
							tf2.setBounds(600, 250, 100, 30);

							Label l3 = new Label("Count");
							l3.setBounds(450, 300, 120, 30);
							// l3.setBackground(Color.lightGray);
							TextField tf3 = new TextField("0");
							tf3.setBounds(600, 300, 100, 30);

							// Enter Button
							Button b11 = new Button("Enter");
							b11.setBounds(540, 370, 70, 30);

							f2.setLayout(null);
							f2.setSize(1920, 1080);
							f2.setTitle("SuperMarket");
							f2.setVisible(true);
							f2.add(l1);
							f2.add(tf1);
							f2.add(l2);
							f2.add(tf2);
							f2.add(l3);
							f2.add(tf3);
							f2.add(ta);
							f2.add(b11);
							ImageIcon background_image = new ImageIcon(
									"C:\\Users\\beula\\OneDrive\\Pictures\\Saved Pictures\\beuus.jpg ");
							JLabel background = new JLabel("", background_image, JLabel.CENTER);
							Image img = background_image.getImage();
							Image temp_img = img.getScaledInstance(1920, 1080, Image.SCALE_SMOOTH);
							background_image = new ImageIcon(temp_img);
							background.setBounds(0, 0, 1920, 1080);
							f2.add(background);

							f2.setBackground(Color.lightGray);
							String y = "";
							 String s="";
								Class.forName("org.postgresql.Driver");
								s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
						        con=DriverManager.getConnection(s);

							Statement cs = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
									ResultSet.CONCUR_UPDATABLE);
							rs = cs.executeQuery(query);
							while (rs.next()) {
								y += rs.getInt(1) + " " + rs.getInt(2) + " " + rs.getString(3) + " " + rs.getInt(4)
										+ " " + rs.getInt(5) + " " + rs.getInt(6) + "\n";

							}
							ta.setText(y);
							f2.addWindowListener(new WindowAdapter() {
								public void windowClosing(WindowEvent we) {
									System.exit(0);
								}

							});

							b11.addActionListener(new ActionListener() {
								public void actionPerformed(ActionEvent ae) {
									try {

										int asked = Integer.parseInt(tf3.getText());
										System.out.println("Asked is " + asked);

										int pid = Integer.parseInt(tf2.getText());
										int vid = Integer.parseInt(tf1.getText());

										String query1 = "";
										String query2 = "";
										String query3 = "";

										rs.absolute(0);
										while (rs.next()) {
											if (rs.getInt(1) == vid && rs.getInt(2) == pid) {

												if (rs.getInt(4) > asked) {
													int x = rs.getInt(4) - asked;
													int up = rs.getInt(5);
													int gst = rs.getInt(6);
													Timestamp ts = Timestamp.from(Instant.now());
													query1 = "update bVendors set available=" + x + " where prod_id="
															+ pid + " and Vendor_id=" + vid + "";
													query2 = "insert into bStocks values(" + pid + "," + vid + ","
															+ asked + ")";
													query3 = "insert into bReports values(" + pid + "," + vid
															+ ",'Purchased',' " + ts + "')";
													System.out.println(query3);
													double total;
													total = asked * (up + gst);
													cs.executeUpdate(query1);
													cs.executeUpdate(query2);
													cs.executeUpdate(query3);
													ta.setText("Total Cost is" + total);

													break;
												} else {
													System.out.println("Under-Stock");
												}
											}
										}
									} catch (Exception exe) {

									}
								}
							});
						}

						catch (Exception exe) {

						}

					}
				});
				b4.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent ae) {
						try {

							Frame f3 = new Frame();
							JButton b1 = new JButton("Sales_b/w_dates");
							b1.setBounds(540, 360, 230, 30);
							JButton b2 = new JButton("Purchases_b/w_dates");
							b2.setBounds(540, 270, 230, 30);
							JButton b3 = new JButton("Item_Level");
							b3.setBounds(740, 360, 230, 30);
							JButton b5 = new JButton("GST");
							b5.setBounds(740, 270, 230, 30);

							f3.setLayout(null);
							f3.setSize(1920, 1080);
							f3.setTitle("Reports");
							f3.setVisible(true);
							f3.add(b1);
							f3.add(b2);
							f3.add(b3);
							f3.add(b5);
							
							ImageIcon background_image = new ImageIcon(
									"C:\\Users\\beula\\OneDrive\\Pictures\\Saved Pictures\\beuus.jpg ");
							JLabel background = new JLabel("", background_image, JLabel.CENTER);
							Image img = background_image.getImage();
							Image temp_img = img.getScaledInstance(1920, 1080, Image.SCALE_SMOOTH);
							background_image = new ImageIcon(temp_img);
							background.setBounds(0, 0, 1920, 1080);
							f3.add(background);

							f3.setBackground(Color.lightGray);
							String y = "";
							 String s="";
								Class.forName("org.postgresql.Driver");
								s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
						        con=DriverManager.getConnection(s);

							Statement cs = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
									ResultSet.CONCUR_UPDATABLE);
							b2.addActionListener(new ActionListener() {
								public void actionPerformed(ActionEvent ae) {
									try {
										Frame f2 = new Frame();
										Label l1 = new Label("Enter Date1");
										l1.setBounds(450, 200, 120, 30);
										// l1.setBackground(Color.lightGray);
										TextField tf1 = new TextField("0");
										tf1.setBounds(600, 200, 100, 30);

										Label l2 = new Label("Enter Date1");
										l2.setBounds(450, 250, 120, 30);
										// l2.setBackground(Color.lightGray);
										TextField tf2 = new TextField("0");
										tf2.setBounds(600, 250, 100, 30);

										
										// Enter Button
										Button b11 = new Button("Enter");
										b11.setBounds(540, 370, 70, 30);

										f2.setLayout(null);
										f2.setSize(1920, 1080);
										f2.setTitle("SuperMarket");
										f2.setVisible(true);
										f2.add(l1);
										f2.add(tf1);
										f2.add(l2);
										f2.add(tf2);
										
										f2.add(ta);
										f2.add(b11);
										String query2="Select * from bReports";
										ImageIcon background_image = new ImageIcon(
												"C:\\Users\\beula\\OneDrive\\Pictures\\Saved Pictures\\beuus.jpg ");
										JLabel background = new JLabel("", background_image, JLabel.CENTER);
										Image img = background_image.getImage();
										Image temp_img = img.getScaledInstance(1920, 1080, Image.SCALE_SMOOTH);
										background_image = new ImageIcon(temp_img);
										background.setBounds(0, 0, 1920, 1080);
										f2.add(background);

										f2.setBackground(Color.lightGray);
										String y = "";
										 String s="";
											Class.forName("org.postgresql.Driver");
											s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
									        con=DriverManager.getConnection(s);

										Statement cs = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
												ResultSet.CONCUR_UPDATABLE);
										rs=cs.executeQuery(query2);
										Date d1 = Date.valueOf(tf1.getText());
										 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
										 Date d1 = format.parse(tf1.getText());
										 Date d2 = format.parse(tf2.getText());
										
										rs.absolute(0);
										String z="";
										while (rs.next()) {
											

												if (d1<rs.getDate(4) && d2> rs.getDate(4) && rs.getString(2)=="Purchased") {
												z+=rs.getInt(1)+" "+rs.getInt(2)+" "+rs.getString(2)+" "+rs.getDate(3)+" "+rs.getInt(4)+" "+"\n";
												}
													
												}
										}
							catch(Exception e) {
								
							}
							ta.setText(y);
							f2.addWindowListener(new WindowAdapter() {
								public void windowClosing(WindowEvent we) {
									System.exit(0);
								}

							});
								}
							});
							catch(Exception e) {
								
							}
						}
					});
				b3.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent ae) {
						try {

							Frame f2 = new Frame();
							TextArea ta1 = new TextArea();
							ta1.setBounds(340, 150, 700, 250);
							f2.setLayout(null);
							f2.setSize(1300, 1300);
							f2.setTitle("Stocks");
							f2.setVisible(true);
							f2.add(ta1);

							f2.setBackground(Color.lightGray);
							String query1;
							query1 = "Select * from bStocks";
							String y = "";
							String s="";
							Class.forName("org.postgresql.Driver");
							s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
					        con=DriverManager.getConnection(s);
							Statement cs = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
									ResultSet.CONCUR_UPDATABLE);
							rs = cs.executeQuery(query1);
							y = "Prod_id" + " " + " " + "Vendor_id" + " " + " " + " " + "Stock_Count" + "\n";
							while (rs.next()) {
								y += rs.getInt(1) + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + " " + " " + " " + " " + " " + rs.getInt(2) + " " + " " + " " + " "
										+ " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + rs.getString(3) + "\n";

							}
							ta1.setText(y);
							f2.addWindowListener(new WindowAdapter() {
								public void windowClosing(WindowEvent we) {
									System.exit(0);
								}

							});
						} catch (Exception e) {

						}
					}
				});

			}
		});

		b6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {

				// Result set of VEndors list
				query = "Select * from bStocks inner join bproducts on bStocks.pid=bproducts.prod_id";

				try {
                    String y="";
                    String s="";
					Class.forName("org.postgresql.Driver");
					s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
			        con=DriverManager.getConnection(s);
		            
		            

				} catch (Exception exe) {
					System.out.println(exe);
				}

				Frame f1 = new Frame();
				Button b1 = new Button("Sales");
				b1.setBounds(540, 360, 90, 30);

				f1.setLayout(null);
				f1.setSize(1300, 1300);
				f1.setTitle("CUSTOMER");
				f1.setVisible(true);
				f1.add(b1);

				f1.setBackground(Color.lightGray);
				f1.addWindowListener(new WindowAdapter() {
					public void windowClosing(WindowEvent we) {
						System.exit(0);
					}

				});

				//
				b1.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent ae) {
						try {
							Frame f2 = new Frame();
							Label l1 = new Label("Enter Vendor_Id");
							l1.setBounds(450, 200, 120, 30);
							l1.setBackground(Color.lightGray);
							TextField tf1 = new TextField("0");
							tf1.setBounds(600, 200, 100, 30);

							Label l2 = new Label("Enter Product_Id");
							l2.setBounds(450, 250, 120, 30);
							l2.setBackground(Color.lightGray);
							TextField tf2 = new TextField("0");
							tf2.setBounds(600, 250, 100, 30);

							Label l3 = new Label("Quantity");
							l3.setBounds(450, 300, 120, 30);
							l3.setBackground(Color.lightGray);
							TextField tf3 = new TextField("0");
							tf3.setBounds(600, 300, 100, 30);

							// Enter Button
							Button b11 = new Button("Enter");
							b11.setBounds(540, 370, 70, 30);

							f2.setLayout(null);
							f2.setSize(1300, 1300);
							f2.setTitle("Customer");
							f2.setVisible(true);
							f2.add(l1);
							f2.add(tf1);
							f2.add(l2);
							f2.add(tf2);
							f2.add(l3);
							f2.add(tf3);
							f2.add(ta);
							f2.add(b11);
							f2.setBackground(Color.lightGray);
							 String y="";
							 String s="";
								Class.forName("org.postgresql.Driver");
								s="jdbc:postgresql://localhost:5432/newdb?user=postgres&password=Beuganji7@";
						        con=DriverManager.getConnection(s);

							Statement cs = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
									ResultSet.CONCUR_UPDATABLE);
							rs = cs.executeQuery(query);
							System.out.println(rs);
							y = "Prod_id" + " " + " " + "Vendor_id" + " " + " " + "Stock_Available" + " " + " "
									+ "Prod_id" + " " + " " + " " + " " + " " + " " + " " + "Prod_Name" + " " + " "
									+ " " + " " + " " + " " + " " + " " + "Category_name" + " " + " " + " " + " " + " "
									+ " " + " " + " " + " " + " " + " " + " " + "GST" + " " + " " + " " + " " + " "
									+ " " + " " + " " + " " + " " + " " + " " + " " + " " + "Unit_Price" + " " + " "
									+ "\n";
							while (rs.next()) {
								y += rs.getInt(1) + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + " " + " " + rs.getInt(2) + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + rs.getString(3)
										+ " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + " " + rs.getString(4) + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + rs.getString(5) + " " + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + rs.getString(6)
										+ " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + " " + " " + " " + " " + " " + rs.getString(7) + " " + " " + " "
										+ " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " " + " "
										+ " " + " " + " " + rs.getString(8) + "\n";

							}
							ta.setText(y);
							f2.addWindowListener(new WindowAdapter() {
								public void windowClosing(WindowEvent we) {
									System.exit(0);
								}

							});

							b11.addActionListener(new ActionListener() {
								public void actionPerformed(ActionEvent ae) {
									try {

										int asked = Integer.parseInt(tf3.getText());
										System.out.println("Asked is " + asked);

										int pid = Integer.parseInt(tf2.getText());
										int vid = Integer.parseInt(tf1.getText());

										String query1 = "";

										String query3 = "";

										rs.absolute(0);
										while (rs.next()) {
											if (rs.getInt(1) == vid && rs.getInt(2) == pid) {
												if (rs.getInt(3) > asked) {
													int x = rs.getInt(3) - asked;
													int up = rs.getInt(8);
													int gst = rs.getInt(7);
													Timestamp ts = Timestamp.from(Instant.now());
													query1 = "update bStocks set StockCount=" + x + " where pid=" + pid
															+ " and vid=" + vid + "";
													double total;
													total = asked * (up + gst);
													query3 = "insert into bReports values(" + pid + "," + vid
															+ ",'Sold',' " + ts + "'," + (int) total + ")";
													System.out.println(query3);
													// double total;
													// total = asked * (up + gst);
													cs.executeUpdate(query1);

													cs.executeUpdate(query3);
													ta.setText("Total Cost is" + total);

													break;
												} else {
													System.out.println("Stock Not Available");
												}
											}
										}

									} catch (Exception exe) {

									}
								}
							});

						} catch (Exception exe) {

						}

					}
				});

			}
		});
	}
}

//
public class SM {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		superMarketApplication sma = new superMarketApplication();

	}

}
